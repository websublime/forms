import{_ as n,c as s,o as a,a as t}from"./app.2931ab38.js";const h='{"title":"Guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"Install","slug":"install"},{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"BaseControl","slug":"basecontrol"}],"relativePath":"guide/getting-started.md"}',o={},e=t(`<h1 id="guide" tabindex="-1">Guide <a class="header-anchor" href="#guide" aria-hidden="true">#</a></h1><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-hidden="true">#</a></h2><p>You can install <code>@websublime/forms</code> via npm or yarn using the following command:</p><div class="language-bash"><pre><code><span class="token function">npm</span> @websublime/forms --save
<span class="token comment"># or</span>
<span class="token function">yarn</span> <span class="token function">add</span> @websublime/forms
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p><code>@websublime/forms</code> has as unique dependency <a href="https://github.com/websublime/schema" target="_blank" rel="noopener noreferrer"><code>@websublime/schema</code></a></p></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NumberType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@websublime/schema&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@websublime/forms&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> control <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

control<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>hasErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> control<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>hasErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.NUMBER.MAX</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constraints<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { max: 10 }</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre></div><h2 id="basecontrol" tabindex="-1">BaseControl <a class="header-anchor" href="#basecontrol" aria-hidden="true">#</a></h2><p>Forms has three type of object models, all of them extends <code>BaseControl</code>:</p><ul><li><a href="/forms/guide/form-control.html">FormControl</a> to map <code>properties</code> from an model.</li><li><a href="/forms/guide/form-group.html">FormGroup</a> to map <code>objects</code> from an model.</li><li><a href="/forms/guide/form-array.html">FormArray</a> to map <code>arrays</code> from an model.</li></ul><p>If we have a model like this, we will get the following form model mapping</p><div class="language-typescript"><pre><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  <span class="token comment">// --&gt; FormGroup for Car</span>
  model<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; FormControl model</span>
  extras<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; FormArray of FormControls for extras</span>
  motor<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// FormGroup for Motor</span>
    type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// FormControl type</span>
    <span class="token class-name">shift</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// FormControl shift</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>All forms object model have a internal state:</p><ul><li><strong>isDirty</strong> - A control is dirty if the user has changed the value in the UI.</li><li><strong>isTouch</strong> - A control is marked touched once the user has triggered a blur event on it.</li><li><strong>isFocus</strong> - A control is marked focus once the user has triggered a focus eventon it. And set to false when a blur event happens.</li><li><strong>isPrestine</strong> - A control is pristine if the user has not yet changed the value in the UI.</li><li><strong>isLoading</strong> - A control is executing validations.</li><li><strong>isValid</strong> - A control is valid.</li><li><strong>errors</strong>: An array of errors generated by failing validation. The order the validation are executed is the order the error are in the array.</li><li><strong>context</strong>: key if the control belongs to a <code>FormGroup</code> or index if the control belogin to an <code>FormArray</code>.</li><li><strong>items</strong>: Only present in the <code>FormArray</code>. Is an array of controls.</li><li><strong>properties</strong>: Only present in the \`FormGroup. Is a record for controls.</li><li><strong>schema</strong>: Validation Schema.</li><li><strong>parent</strong>: Parent control.</li></ul>`,14),p=[e];function c(l,i,r,u,k,d){return a(),s("div",null,p)}var g=n(o,[["render",c]]);export{h as __pageData,g as default};
