import{_ as n,c as a,o as s,a as t}from"./app.2931ab38.js";const h='{"title":"What is Forms?","description":"","frontmatter":{},"headers":[{"level":2,"title":"Motivation","slug":"motivation"},{"level":2,"title":"Concepts","slug":"concepts"},{"level":3,"title":"Model","slug":"model"},{"level":3,"title":"Validation Schema","slug":"validation-schema"},{"level":3,"title":"Form model","slug":"form-model"},{"level":3,"title":"Validate","slug":"validate"},{"level":3,"title":"Provider Component","slug":"provider-component"}],"relativePath":"guide/index.md"}',o={},p=t(`<h1 id="what-is-forms" tabindex="-1">What is Forms? <a class="header-anchor" href="#what-is-forms" aria-hidden="true">#</a></h1><p><code>@websublime/forms</code> package is a form validation model and rely on <code>@websublime/schema</code> package to make validations.</p><p><code>@websublime/forms</code> package is based on <code>angular</code> forms model, to make form validation easy.</p><p><code>@websublime/forms</code> package is framework agnostic.</p><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-hidden="true">#</a></h2><p>Forms was created to take advantage of a schema validation <code>@websublime/schema</code> and apply to form validation.</p><p>Is based on <code>angular</code> forms model, taking laverage of schema validation and yet very complete.</p><p>All validation rules are defined in the schema and are async and run async, in order of it definition.</p><p>It also have two ways of validate a model:</p><ul><li><p>From top to bottom. It will validate all form fields.</p></li><li><p>And from bottom to top. It very useful to be used with single form control validation. When you fill a form with several fields, we don&#39;t all fields to be validation at same time. Only if they are changed.</p></li></ul><h2 id="concepts" tabindex="-1">Concepts <a class="header-anchor" href="#concepts" aria-hidden="true">#</a></h2><p>To create a form we use three concepts:</p><ul><li><p>Model - A javascript object.</p></li><li><p>Validation Schema - A schema object with validation rules, that describes the <code>Model</code>.</p></li><li><p>Forms Model - A forms model based on the <code>Validation Schema</code>.</p></li><li><p>Provider component - A component to trigger form control validation.</p></li></ul><h3 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-hidden="true">#</a></h3><div class="language-typescript"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="validation-schema" tabindex="-1">Validation Schema <a class="header-anchor" href="#validation-schema" aria-hidden="true">#</a></h3><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ObjectType</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  email<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="form-model" tabindex="-1">Form model <a class="header-anchor" href="#form-model" aria-hidden="true">#</a></h3><div class="language-typescript"><pre><code><span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isFocus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isDirty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isTouch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isPrestine<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>hasErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="validate" tabindex="-1">Validate <a class="header-anchor" href="#validate" aria-hidden="true">#</a></h3><div class="language-typescript"><pre><code>control<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">&#39;teste.com&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> control<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="provider-component" tabindex="-1">Provider Component <a class="header-anchor" href="#provider-component" aria-hidden="true">#</a></h3><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-control</span> <span class="token attr-name">:form-control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fg.name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-text-field</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.name<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ on , errors}<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:error-messages</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>errors<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form-control</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>Example in VueJs wrapping the form control provider component with a <code>v-text-field</code> from a popular ui framework <code>vuetifyjs</code></p></div>`,24),e=[p];function c(l,i,u,r,k,d){return s(),a("div",null,e)}var f=n(o,[["render",c]]);export{h as __pageData,f as default};
