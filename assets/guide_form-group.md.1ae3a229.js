import{_ as n,c as s,o as a,a as t}from"./app.2931ab38.js";const f='{"title":"Form Group","description":"","frontmatter":{},"headers":[{"level":2,"title":"Validation","slug":"validation"},{"level":3,"title":"Single Control (Bottom up validation)","slug":"single-control-bottom-up-validation"},{"level":3,"title":"Validate All (Top to Bottom)","slug":"validate-all-top-to-bottom"},{"level":2,"title":"Change state","slug":"change-state"},{"level":2,"title":"Nested FormGroups","slug":"nested-formgroups"}],"relativePath":"guide/form-group.md"}',p={},o=t(`<h1 id="form-group" tabindex="-1">Form Group <a class="header-anchor" href="#form-group" aria-hidden="true">#</a></h1><p><code>FormGroup</code> is used to map objects in an object model.</p><p>Most of the UI forms have several input components. Each input component is linked to a <code>FormControl</code> and grouped into a <code>FormGroup</code>.</p><p>We can say a <code>FormGroup</code> is linked to an UI form.</p><h2 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-hidden="true">#</a></h2><p>The follwing code create a validation schema for a object with three properties.</p><p>The model:</p><div class="language-typescript"><pre><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The schema:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ObjectType</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  email<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then we can create a GroupControl for this validation schema.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>The <code>FormGroup</code> object will create <code>FormControl</code> object for each property.</p></div><h3 id="single-control-bottom-up-validation" tabindex="-1">Single Control (Bottom up validation) <a class="header-anchor" href="#single-control-bottom-up-validation" aria-hidden="true">#</a></h3><p>The following code, show how the <code>validate</code> method works.</p><p>Validate will validate from bottom to top. So it will execute all validation rules for the age property:</p><ul><li>isRequired()</li><li>max(10)</li></ul><p>And then it goes up and execute all rules defined for the ObjectType. Is this case it&#39;s none.</p><div class="language-typescript"><pre><code>fg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  email<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>name<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="validate-all-top-to-bottom" tabindex="-1">Validate All (Top to Bottom) <a class="header-anchor" href="#validate-all-top-to-bottom" aria-hidden="true">#</a></h3><p><code>validateAll</code> method will validate all rules defined at object level and will drill down the properties.</p><p>Everything will be validated.</p><div class="language-typescript"><pre><code>fg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  email<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> fg<span class="token punctuation">.</span><span class="token function">validateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>ageError<span class="token punctuation">]</span> <span class="token operator">=</span> fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ageError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// {</span>
<span class="token comment">//   key: &#39;age&#39;,</span>
<span class="token comment">//   i18n: &#39;ERRORS.NUMBER.MIN&#39;,</span>
<span class="token comment">//   constraints: { min: 18 },</span>
<span class="token comment">//   value: 10</span>
<span class="token comment">// }</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>emailError<span class="token punctuation">]</span> <span class="token operator">=</span> fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emailError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// {</span>
<span class="token comment">//   key: &#39;email&#39;,</span>
<span class="token comment">//   i18n: &#39;ERRORS.IS_REQUIRED&#39;,</span>
<span class="token comment">//   constraints: null,</span>
<span class="token comment">//   value: null</span>
<span class="token comment">// }</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>name<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>nameError<span class="token punctuation">]</span> <span class="token operator">=</span> fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// {</span>
<span class="token comment">//   key: &#39;email&#39;,</span>
<span class="token comment">//   i18n: &#39;ERRORS.IS_REQUIRED&#39;,</span>
<span class="token comment">//   constraints: null,</span>
<span class="token comment">//   value: null</span>
<span class="token comment">// }</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="change-state" tabindex="-1">Change state <a class="header-anchor" href="#change-state" aria-hidden="true">#</a></h2><p>The following code show that changing the state for a nested control it will propagate to the top.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ObjectType</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  email<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">setDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>age<span class="token punctuation">.</span>isDirty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// age is dirty</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>name<span class="token punctuation">.</span>isDirty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name is not dirty</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">.</span>isDirty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// email is dirty</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>isDirty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fg is dirty.</span>
</code></pre></div><h2 id="nested-formgroups" tabindex="-1">Nested FormGroups <a class="header-anchor" href="#nested-formgroups" aria-hidden="true">#</a></h2><p>Form object model is based on schema validation objects. Schema validation object can describe any type of JSON object.</p><p>So to have nested <code>FormGroup</code>s we simple need to define a schema with nested objects.</p><p>The code bellow show the definition of a schema that describes a nested object.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">ObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  contact<span class="token operator">:</span> <span class="token function">ObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token string">&#39;CUSTOM.MESSAGE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    phone<span class="token operator">:</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then we only need to pass the schema to the FormGroup object.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

fg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  contact<span class="token operator">:</span> <span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token string">&#39;teste&#39;</span><span class="token punctuation">,</span>
    phone<span class="token operator">:</span> <span class="token string">&#39;222444222&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The code below show how we can access the <code>FormGroup</code> for nested object <code>contact</code>.</p><p>It show that when we validate <code>emailFormControl</code> the validation is propagated to the top.</p><p><strong>Note</strong> the propagation is bottom up. Sibbling controls will not be affected.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> fgContact <span class="token operator">=</span> fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>contact<span class="token punctuation">;</span> <span class="token comment">// access the FormGroup for nested object contact</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fgContact <span class="token keyword">instanceof</span> <span class="token class-name">FormGroup</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> emailFormControl <span class="token operator">=</span> fgContact<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>email<span class="token punctuation">;</span>
<span class="token keyword">const</span> phoneFormControl <span class="token operator">=</span> fgContact<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>phone<span class="token punctuation">;</span>

<span class="token keyword">await</span> emailFormControl<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// validate email control. It will propagate the validation to the top.</span>

<span class="token function">expect</span><span class="token punctuation">(</span>emailFormControl<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>phoneFormControl<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is still valid.</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fgContact<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>name<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is still valid</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>hasErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>emailFormControl<span class="token punctuation">.</span>hasErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>emailFormControl<span class="token punctuation">.</span>errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;CUSTOM.MESSAGE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// custom message defined on the schema</span>
</code></pre></div><p>Code below show how to validate all the form, including nested <code>FormGroup</code>s (Top to Bottom)</p><div class="language-typescript"><pre><code>fg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  contact<span class="token operator">:</span> <span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token string">&#39;huzgo1@gmail.com&#39;</span><span class="token punctuation">,</span>
    phone<span class="token operator">:</span> <span class="token string">&#39;222444222&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> fg<span class="token punctuation">.</span><span class="token function">validateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fgContact<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>emailFormControl<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>fg<span class="token punctuation">.</span>hasErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,39),c=[o];function e(u,l,i,k,r,d){return a(),s("div",null,c)}var g=n(p,[["render",e]]);export{f as __pageData,g as default};
